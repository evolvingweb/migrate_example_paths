# Generates additional aliases for articles.
#
# We usually migrate node aliases along with node data. Say, for some reason, we want to generate URL aliases in a
# stand-alone migration. This example does exactly that. It uses the category_data migration and the article_data
# migrations and creates URL aliases of the form "/blog/{{ category-slug }}/{{ article-slug }}", which point to the
# articles we migrated in the "article_data" migration.

# Migration metadata
id: example_article_alias
label: Article aliases
migration_group: example_article
migration_tags:
  - url-alias
  - article
  # This tag will be used for computing the source CSV path.
  - migrate-example-paths
# Migration source
#
# We will read the data we have in the source CSV file provided with this example. However, if you are migrating from
# and older version of Drupal, you can use the "d6_url_alias" or "d7_url_alias" plugins provided by the "path" module.
source:
  plugin: csv
  path: article.csv
  header_row_count: 1
  # "slug" is the only unique identifier in the source CSV.
  keys:
    - slug
  # Field descriptions
  fields:
    slug: 'Unique slug for URLs.'
    heading: 'Title of the article.'
    content: 'Body of the article.'
  # Constants
  constants:
    slash: '/'
    source_prefix: '/node/'
    alias_prefix: '/blog/'
    und: und
# Migration destination
#
# Since we want to create URL aliases, we need to use the destination plugin "url_alias" provided by the "path" module.
# Taking a quick look at the plugin source at Drupal\path\Plugin\migrate\destination\UrlAlias::fields(), we can figure
# out the fields supported by this plugin.
destination:
  plugin: url_alias
# Migration processes
process:
  # Figure out the ID of the corresponding node.
  #
  # Since this field will just be used for computing another property, I have prefixed it with "temp_".
  temp_nid:
    plugin: migration_lookup
    source: slug
    migration: example_article_data
  # Specify the actual path to which are want to define an alias.
  #
  # We want to point to "/node/NID", so we generate that by concatenating various properties.
  source:
    plugin: concat
    source:
      - constants/source_prefix
      - @temp_nid
  # Load category data to generate the "category-slug", which is like a URL friendly version of the category name.
  temp_category_slug:
    # First, retrieve the ID of the taxonomy term created during the "category_data" migration.
    -
      plugin: migration_lookup
      source: category
      migration: example_category_data
    # Use a custom callback to get the category name.
    -
      plugin: callback
      callable: _migrate_example_paths_load_taxonomy_term_name
    # Prepare a url-friendly version for the category.
    -
      plugin: machine_name
  # Specify the alias which should point to the "source" specified above.
  #
  # If you don't know what aliases are this tutorial might not be for you. Please read about the "path" module to
  # learn more about paths and aliases in Drupal.
  alias:
    plugin: concat
    source:
      - constants/alias_prefix
      - @temp_category_slug
      - constants/slash
      - slug
  # All URL aliases need to specify a language.
  #
  # In our case, we simply hard-code it to "und" as in "Undefined". This is important! A value must be provided for
  # this property, otherwise, you will get errors while running the migration.
  langcode: constants/und
# Migration dependencies
migration_dependencies:
  required:
    - example_article_data
    - example_category_data
